import { useState, useEffect } from 'react';
import axios from 'axios';
import Sidebar from './Sidebar';
import { Bar, Pie } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';
import jsPDF from 'jspdf';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement);

export default function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [allRecentActivity, setAllRecentActivity] = useState([]);
  const [activityPage, setActivityPage] = useState(1);
  const [appointments, setAppointments] = useState([]);
  const [prescriptions, setPrescriptions] = useState([]);
  const [medicalRecords, setMedicalRecords] = useState([]);
  const [selectedPatient, setSelectedPatient] = useState(null);

  const [userForm, setUserForm] = useState({
    password: '',
    role: 'doctor',
    name: '',
    specialization: '',
    age: '',
    gender: '',
    location: '',
    phone: '',
    email: '',
    speciality: '',
    beds: '',
    hospital_user_id: ''
  });
  const [appointmentForm, setAppointmentForm] = useState({
    doctor_user_id: '',
    patient_user_id: '',
    time: '',
    date: '',
    notes: '',
    status: 'Scheduled',
    token_number: '' // Token number will be generated by backend
  });
  const [prescriptionForm, setPrescriptionForm] = useState({
    patient_user_id: '',
    medication: '',
    dosage: '',
    instructions: '',
    duration: '',
    duration_unit: 'days',
    frequency: '',
    frequency_unit: 'times per day',
    follow_up: false
  });
  const [recordForm, setRecordForm] = useState({
    patient_user_id: '',
    diagnosis: '',
    treatment: '',
    notes: ''
  });
  const [userFilter, setUserFilter] = useState({ role: '', name: '', specialization: '' });
  const [sortOrder, setSortOrder] = useState('none');
  const [apptFilter, setApptFilter] = useState({ doctor_user_id: '', patient_user_id: '', status: '' });
  const [prescriptionFilter, setPrescriptionFilter] = useState({ patient_user_id: '', medication: '' });
  const [recordFilter, setRecordFilter] = useState({ patient_user_id: '', diagnosis: '' });
  const [message, setMessage] = useState('');
  const [editUser, setEditUser] = useState(null);
  const [hospital, setHospital] = useState([]);
  const [editAppointment, setEditAppointment] = useState(null);
  const [editPrescription, setEditPrescription] = useState(null);
  const [editRecord, setEditRecord] = useState(null);
  const [activeSection, setActiveSection] = useState('dashboard');
  const [isLoading, setIsLoading] = useState(false);
  const [deleteUser, setDeleteUser] = useState(null);
  const [isDeletingAppointment, setIsDeletingAppointment] = useState(false);
  const [isDeletingPrescription, setIsDeletingPrescription] = useState(false);
  const [isDeletingRecord, setIsDeletingRecord] = useState(false);
  const [userPage, setUserPage] = useState({ doctors: 1, patients: 1, hospitals: 1 });
  const [showSortOptions, setShowSortOptions] = useState(false);
  const [activeUserTable, setActiveUserTable] = useState('doctors');
  const [recentActivity, setRecentActivity] = useState([]);
  const itemsPerPage = 10;
  const paginatedRecentActivity = allRecentActivity.slice((activityPage - 1) * itemsPerPage, activityPage * itemsPerPage);

  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        const [usersRes, apptsRes, prescriptionsRes, recordsRes, activityRes] = await Promise.all([
          axios.get(`http://localhost:5000/users?${new URLSearchParams(userFilter).toString()}`),
          axios.get(`http://localhost:5000/appointments?${new URLSearchParams(apptFilter).toString()}`),
          axios.get(`http://localhost:5000/prescriptions?${new URLSearchParams(prescriptionFilter).toString()}`),
          axios.get(`http://localhost:5000/medical_records?${new URLSearchParams(recordFilter).toString()}`),
          axios.get('http://localhost:5000/recent_activity?limit=5'),
        ]);
        setUsers(usersRes.data);
        setAppointments(apptsRes.data);
        setPrescriptions(prescriptionsRes.data);
        setMedicalRecords(recordsRes.data);
        setRecentActivity(activityRes.data);
      } catch (err) {
        setMessage(err.response?.data?.message || 'Failed to fetch data');
      } finally {
        setIsLoading(false);
      }
    };
    fetchData();
  }, [userFilter, apptFilter, prescriptionFilter, recordFilter]);

  useEffect(() => {
    const fetchAllRecentActivity = async () => {
      if (activeSection === 'recent_activity') {
        setIsLoading(true);
        try {
          const response = await axios.get('http://localhost:5000/recent_activity');
          setAllRecentActivity(response.data);
        } catch (err) {
          setMessage(err.response?.data?.message || 'Failed to fetch recent activity');
        } finally {
          setIsLoading(false);
        }
      }
    };
    fetchAllRecentActivity();
  }, [activeSection]);

  useEffect(() => {
    const fetchHospitals = async () => {
      try {
        const response = await axios.get('http://localhost:5000/hospitals');
        setHospital(response.data);
      } catch (err) {
        console.error('Error fetching hospitals:', err);
      }
    };
    fetchHospitals();
  }, []);

  const handleUserSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const formData = { ...userForm };
      if (formData.role !== 'doctor' && formData.role !== 'patient') {
        delete formData.hospital_user_id; 
      }
      let res;
      if (editUser) {
        res = await axios.put(`http://localhost:5000/users/${editUser.user_id}`, formData);
        setMessage(res.data.message);
        setEditUser(null);
      } else {
        res = await axios.post('http://localhost:5000/users', formData);
        setMessage(res.data.message);
      }
      setUserForm({ password: '', role: 'doctor', name: '', specialization: '', phone: '', email: '', age: '', gender: '', hospital_user_id: '', location: '', speciality: '', beds: '' });
      await fetchUsers();
    } catch (err) {
      setMessage(err.response?.data?.message || 'Operation failed: Could not save user');
    } finally {
      setIsLoading(false);
    }
  };

  const fetchUsers = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/users?${new URLSearchParams(userFilter).toString()}`);
      let sortedUsers = [...res.data];
      if (sortOrder === 'asc') {
        sortedUsers.sort((a, b) => a.name.localeCompare(b.name));
      } else if (sortOrder === 'desc') {
        sortedUsers.sort((a, b) => b.name.localeCompare(b.name));
      }
      setUsers(sortedUsers);
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to fetch users');
    }
  };

  const fetchAppointments = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/appointments?${new URLSearchParams(apptFilter).toString()}`);
      setAppointments(res.data);
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to fetch appointments');
    }
  };

  const fetchPrescriptions = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/prescriptions?${new URLSearchParams(prescriptionFilter).toString()}`);
      setPrescriptions(res.data);
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to fetch prescriptions');
    }
  };

  const fetchMedicalRecords = async () => {
    try {
      const res = await axios.get(`http://localhost:5000/medical_records?${new URLSearchParams(recordFilter).toString()}`);
      setMedicalRecords(res.data);
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to fetch medical records');
    }
  };

  const handleAppointmentSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      if (editAppointment) {
        const res = await axios.put(`http://localhost:5000/appointments/${editAppointment._id}`, appointmentForm);
        setMessage(res.data.message);
        setEditAppointment(null);
        await fetchAppointments();
      } else {
        const res = await axios.post('http://localhost:5000/appointments', appointmentForm);
        setMessage(res.data.message);
        await fetchAppointments();
      }
      setAppointmentForm({ doctor_user_id: '', patient_user_id: '', time: '', date: '', notes: '', status: 'Scheduled', token_number: '' });
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to save appointment');
    } finally {
      setIsLoading(false);
    }
  };

  const handlePrescriptionSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const formData = { ...prescriptionForm, doctor_user_id: localStorage.getItem('user_id') || 'AD_root' };
      if (editPrescription) {
        const res = await axios.put(`http://localhost:5000/prescriptions/${editPrescription._id}`, formData);
        setMessage(res.data.message);
        setEditPrescription(null);
      } else {
        const res = await axios.post('http://localhost:5000/prescriptions', formData);
        setMessage(res.data.message);
      }
      setPrescriptionForm({ patient_user_id: '', medication: '', dosage: '', instructions: '', duration: '', duration_unit: 'days', frequency: '', frequency_unit: 'times per day', follow_up: false });
      await fetchPrescriptions();
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to save prescription');
    } finally {
      setIsLoading(false);
    }
  };

  const handleRecordSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      const formData = { ...recordForm, doctor_user_id: localStorage.getItem('user_id') || 'AD_root' };
      if (editRecord) {
        const res = await axios.put(`http://localhost:5000/medical_records/${editRecord._id}`, formData);
        setMessage(res.data.message);
        setEditRecord(null);
      } else {
        const res = await axios.post('http://localhost:5000/medical_records', formData);
        setMessage(res.data.message);
      }
      setRecordForm({ patient_user_id: '', diagnosis: '', treatment: '', notes: '' });
      await fetchMedicalRecords();
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to save medical record');
    } finally {
      setIsLoading(false);
    }
  };

  const handleDelete = async (user) => {
    if (!window.confirm(`Are you sure you want to delete ${user.name}? This action cannot be undone.`)) return;
    setIsLoading(true);
    setDeleteUser(user.user_id);
    try {
      await axios.delete(`http://localhost:5000/users/${user.user_id}`);
      setUsers(users.filter(u => u.user_id !== user.user_id));
      setMessage('User deleted successfully');
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to delete user');
    } finally {
      setIsLoading(false);
      setDeleteUser(null);
    }
  };

  const deleteAppointment = async (id) => {
    if (!window.confirm('Are you sure you want to delete this appointment?')) return;
    setIsDeletingAppointment(true);
    try {
      await axios.delete(`http://localhost:5000/appointments/${id}`);
      setAppointments(appointments.filter(appt => appt._id !== id));
      setMessage('Appointment deleted successfully');
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to delete appointment');
    } finally {
      setIsDeletingAppointment(false);
    }
  };

  const deletePrescription = async (id) => {
    if (!window.confirm('Are you sure you want to delete this prescription?')) return;
    setIsDeletingPrescription(true);
    try {
      await axios.delete(`http://localhost:5000/prescriptions/${id}`);
      setPrescriptions(prescriptions.filter(p => p._id !== id));
      setMessage('Prescription deleted successfully');
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to delete prescription');
    } finally {
      setIsDeletingPrescription(false);
    }
  };

  const deleteRecord = async (id) => {
    if (!window.confirm('Are you sure you want to delete this medical record?')) return;
    setIsDeletingRecord(true);
    try {
      await axios.delete(`http://localhost:5000/medical_records/${id}`);
      setMedicalRecords(medicalRecords.filter(r => r._id !== id));
      setMessage('Medical record deleted successfully');
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to delete medical record');
    } finally {
      setIsDeletingRecord(false);
    }
  };

  const editUserData = (user) => {
    setEditUser(user);
    setUserForm({
      user_id: user.user_id,
      password: '',
      role: user.role,
      name: user.name,
      specialization: user.specialization || '',
      phone: user.phone || '',
      email: user.email || '',
      age: user.age || '',
      gender: user.gender || '',
      hospital_user_id: user.hospital_user_id || '',
      location: user.location || '',
      speciality: user.speciality || '',
      beds: user.beds || ''
    });
  };

  const editAppointmentData = (appt) => {
    setEditAppointment(appt);
    setAppointmentForm({
      doctor_user_id: appt.doctor_user_id,
      patient_user_id: appt.patient_user_id,
      time: appt.time.includes(' ') ? appt.time.split(' ')[1] : appt.time,
      date: appt.date.split('T')[0],
      notes: appt.notes || '',
      status: appt.status || 'Scheduled',
      token_number: appt.token_number || ''
    });
  };

  const editPrescriptionData = (prescription) => {
    setEditPrescription(prescription);
    setPrescriptionForm({
      patient_user_id: prescription.patient_user_id,
      medication: prescription.medication,
      dosage: prescription.dosage,
      instructions: prescription.instructions || '',
      duration: prescription.duration || '',
      duration_unit: prescription.duration_unit || 'days',
      frequency: prescription.frequency || '',
      frequency_unit: prescription.frequency_unit || 'times per day',
      follow_up: prescription.follow_up || false
    });
  };

  const editRecordData = (record) => {
    setEditRecord(record);
    setRecordForm({
      patient_user_id: record.patient_user_id,
      diagnosis: record.diagnosis || '',
      treatment: record.treatment || '',
      notes: record.notes || ''
    });
  };

  const cancelEdit = () => {
    setEditUser(null);
    setUserForm({ password: '', role: 'doctor', name: '', specialization: '', phone: '', email: '', age: '', gender: '', hospital_user_id: '', location: '', speciality: '', beds: '' });
  };

  const cancelAppointmentEdit = () => {
    setEditAppointment(null);
    setAppointmentForm({ doctor_user_id: '', patient_user_id: '', time: '', date: '', notes: '', status: 'Scheduled', token_number: '' });
  };

  const cancelPrescriptionEdit = () => {
    setEditPrescription(null);
    setPrescriptionForm({ patient_user_id: '', medication: '', dosage: '', instructions: '', duration: '', duration_unit: 'days', frequency: '', frequency_unit: 'times per day', follow_up: false });
  };

  const cancelRecordEdit = () => {
    setEditRecord(null);
    setRecordForm({ patient_user_id: '', diagnosis: '', treatment: '', notes: '' });
  };

  const viewPatientDetails = (patientId) => {
    const patient = users.find(u => u.user_id === patientId && u.role === 'patient');
    setSelectedPatient(patient || null);
  };

  const downloadBillPDF = (appt) => {
    const doc = new jsPDF();
    const patient = users.find(p => p.user_id === appt.patient_user_id);
    const doctor = users.find(d => d.user_id === appt.doctor_user_id);
    const hospital = users.find(h => h.user_id === patient?.hospital_user_id);

    doc.setFontSize(16);
    doc.text('Appointment Bill', 20, 20);
    doc.setFontSize(12);
    doc.text(`Appointment ID: ${appt._id}`, 20, 30);
    doc.text(`Token Number: ${appt.token_number || 'N/A'}`, 20, 40);
    doc.text(`Patient: ${patient?.name || appt.patient_user_id}`, 20, 50);
    doc.text(`Doctor: ${doctor?.name || appt.doctor_user_id}`, 20, 60);
    doc.text(`Hospital: ${hospital?.name || 'N/A'}`, 20, 70);
    doc.text(`Date: ${new Date(appt.date).toLocaleDateString()}`, 20, 80);
    doc.text(`Time: ${appt.time}`, 20, 90);
    doc.text(`Status: ${appt.status}`, 20, 100);
    doc.text(`Notes: ${appt.notes || 'None'}`, 20, 110);
    doc.text('Amount: $100.00', 20, 120); // Static amount; adjust as needed
    doc.save(`bill_${appt._id}.pdf`);
  };

  const exportExcel = async (type) => {
    try {
      let url = `http://localhost:5000/export/${type}/excel`;
      const params = new URLSearchParams();
      if (type === 'doctors') {
        params.append('role', 'doctor');
        if (userFilter.name) params.append('name', userFilter.name);
        if (userFilter.specialization) params.append('specialization', userFilter.specialization);
      } else if (type === 'patients') {
        params.append('role', 'patient');
        if (userFilter.name) params.append('name', userFilter.name);
      } else if (type === 'hospitals') {
        params.append('role', 'hospital');
        if (userFilter.name) params.append('name', userFilter.name);
      } else if (type === 'appointments') {
        if (apptFilter.doctor_user_id) params.append('doctor_user_id', apptFilter.doctor_user_id);
        if (apptFilter.patient_user_id) params.append('patient_user_id', apptFilter.patient_user_id);
      } else if (type === 'prescriptions') {
        if (prescriptionFilter.patient_user_id) params.append('patient_user_id', prescriptionFilter.patient_user_id);
      } else if (type === 'medical_records') {
        if (recordFilter.patient_user_id) params.append('patient_user_id', recordFilter.patient_user_id);
      }
      if (params.toString()) url += `?${params.toString()}`;
      window.open(url, '_blank');
    } catch (err) {
      setMessage('Failed to generate Excel export');
    }
  };

  const doctors = users.filter(user => user.role === 'doctor');
  const filteredDoctors = doctors.filter(user =>
    (!userFilter.name || user.name.toLowerCase().includes(userFilter.name.toLowerCase())) &&
    (!userFilter.specialization || user.specialization === userFilter.specialization)
  );
  const sortedDoctors = [...filteredDoctors];
  if (sortOrder === 'asc') {
    sortedDoctors.sort((a, b) => {
      if (!a.name) return 1;
      if (!b.name) return -1;
      const nameA = a.name.replace(/^(Dr\.|Dr )/i, '').trim();
      const nameB = b.name.replace(/^(Dr\.|Dr )/i, '').trim();
      return nameA.localeCompare(nameB);
    });
  } else if (sortOrder === 'desc') {
    sortedDoctors.sort((a, b) => {
      if (!a.name) return -1;
      if (!b.name) return 1;
      const nameA = a.name.replace(/^(Dr\.|Dr )/i, '').trim();
      const nameB = b.name.replace(/^(Dr\.|Dr )/i, '').trim();
      return nameB.localeCompare(nameA);
    });
  }
  const paginatedDoctors = sortedDoctors.slice((userPage.doctors - 1) * itemsPerPage, userPage.doctors * itemsPerPage);

  const patients = users.filter(user => user.role === 'patient');
  const sortedPatients = [...patients];
  sortedPatients.sort((a, b) => {
    if (!a.name) return 1;
    if (!b.name) return -1;
    const nameA = a.name.replace(/^(Dr\.|Dr )/i, '').trim();
    const nameB = b.name.replace(/^(Dr\.|Dr )/i, '').trim();
    return nameA.localeCompare(nameB);
  });
  const paginatedPatients = sortedPatients.slice((userPage.patients - 1) * itemsPerPage, userPage.patients * itemsPerPage);

  const hospitals = users.filter(user => user.role === 'hospital');
  const sortedHospitals = [...hospitals];
  if (sortOrder === 'asc') {
    sortedHospitals.sort((a, b) => a.name.localeCompare(b.name));
  } else if (sortOrder === 'desc') {
    sortedHospitals.sort((a, b) => b.name.localeCompare(b.name));
  }
  const paginatedHospitals = sortedHospitals.slice((userPage.hospitals - 1) * itemsPerPage, userPage.hospitals * itemsPerPage);

  const handleFilterChange = (filterType, key, value) => {
    if (filterType === 'user') {
      setUserFilter(prev => ({ ...prev, [key]: value }));
    } else if (filterType === 'appointment') {
      setApptFilter(prev => ({ ...prev, [key]: value }));
    } else if (filterType === 'prescription') {
      setPrescriptionFilter(prev => ({ ...prev, [key]: value }));
    } else if (filterType === 'record') {
      setRecordFilter(prev => ({ ...prev, [key]: value }));
    }
  };

  const appointmentStatusData = {
    labels: ['Scheduled', 'Completed', 'Cancelled'],
    datasets: [{
      data: [
        appointments.filter(a => a.status === 'Scheduled').length,
        appointments.filter(a => a.status === 'Completed').length,
        appointments.filter(a => a.status === 'Cancelled').length,
      ],
      backgroundColor: ['#36A2EB', '#4CAF50', '#FF6384'],
      hoverBackgroundColor: ['#36A2EB', '#4CAF50', '#FF6384'],
    }],
  };

  const userGrowthData = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    datasets: [{
      label: 'New Users',
      data: users.reduce((acc, user) => {
        const month = new Date(user.created_at).getMonth();
        acc[month] = (acc[month] || 0) + 1;
        return acc;
      }, Array(6).fill(0)),
      backgroundColor: '#36A2EB',
      borderColor: '#36A2EB',
      borderWidth: 1,
    }],
  };

  // 1. Add a refresh function for recent activity
  const refreshRecentActivity = async () => {
    setIsLoading(true);
    try {
      const response = await axios.get('http://localhost:5000/recent_activity');
      setAllRecentActivity(response.data);
      setActivityPage(1);
    } catch (err) {
      setMessage(err.response?.data?.message || 'Failed to fetch recent activity');
    } finally {
      setIsLoading(false);
    }
  };

  // 2. Add a refresh function for medical records
  const refreshMedicalRecords = async () => {
    setIsLoading(true);
    try {
      await fetchMedicalRecords();
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col md:flex-row h-screen bg-gray-100">
      <Sidebar role="admin" onSectionChange={setActiveSection} />
      <div className="flex-1 p-4 md:p-6 md:ml-[250px] overflow-auto">
        {message && (
          <div className={`mb-4 p-4 rounded ${message.includes('successfully') ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
            <div className="flex justify-between items-center">
              <span>{message}</span>
              <button onClick={() => setMessage('')} className="text-lg font-bold hover:text-gray-600">×</button>
            </div>
          </div>
        )}

        {selectedPatient && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-lg">
              <h3 className="text-xl font-bold mb-4 text-gray-800">Patient Details</h3>
              <div className="space-y-2">
                <p><strong>Name:</strong> {selectedPatient.name}</p>
                <p><strong>User ID:</strong> {selectedPatient.user_id}</p>
                <p><strong>Email:</strong> {selectedPatient.email || 'N/A'}</p>
                <p><strong>Phone:</strong> {selectedPatient.phone || 'N/A'}</p>
                <p><strong>Age:</strong> {selectedPatient.age || 'N/A'}</p>
                <p><strong>Gender:</strong> {selectedPatient.gender || 'N/A'}</p>
                <p><strong>Hospital:</strong> {hospital.find(h => h.user_id === selectedPatient.hospital_user_id)?.name || 'N/A'}</p>
                {selectedPatient.address && <p><strong>Address:</strong> {selectedPatient.address}</p>}
                {selectedPatient.about && <p><strong>About:</strong> {selectedPatient.about}</p>}
                <p><strong>Appointments:</strong> {appointments.filter(a => a.patient_user_id === selectedPatient.user_id).length}</p>
                <p><strong>Prescriptions:</strong> {prescriptions.filter(p => p.patient_user_id === selectedPatient.user_id).length}</p>
                <p><strong>Medical Records:</strong> {medicalRecords.filter(r => r.patient_user_id === selectedPatient.user_id).length}</p>
              </div>
              <div className="flex justify-end mt-4">
                <button
                  onClick={() => setSelectedPatient(null)}
                  className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300 ease-in-out"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}

        {activeSection === 'dashboard' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Admin Dashboard</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6 mb-6">
              <div className="bg-blue-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Total Users</h3>
                <p className="text-2xl md:text-3xl font-bold text-blue-600">{users.length}</p>
              </div>
              <div className="bg-green-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Doctors</h3>
                <p className="text-2xl md:text-3xl font-bold text-green-600">{doctors.length}</p>
              </div>
              <div className="bg-purple-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Patients</h3>
                <p className="text-2xl md:text-3xl font-bold text-purple-600">{patients.length}</p>
              </div>
              <div className="bg-yellow-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Appointments</h3>
                <p className="text-2xl md:text-3xl font-bold text-yellow-600">{appointments.length}</p>
              </div>
              <div className="bg-red-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Prescriptions</h3>
                <p className="text-2xl md:text-3xl font-bold text-red-600">{prescriptions.length}</p>
              </div>
              <div className="bg-indigo-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Medical Records</h3>
                <p className="text-2xl md:text-3xl font-bold text-indigo-600">{medicalRecords.length}</p>
              </div>
              <div className="bg-teal-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Hospitals</h3>
                <p className="text-2xl md:text-3xl font-bold text-teal-600">{hospitals.length}</p>
              </div>
              <div className="bg-orange-50 rounded-lg p-4 shadow">
                <h3 className="text-md md:text-lg font-semibold text-gray-700">Active Appointments</h3>
                <p className="text-2xl md:text-3xl font-bold text-orange-600">
                  {appointments.filter(a => a.status === 'Scheduled').length}
                </p>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
              <div className="bg-white rounded-lg shadow p-4">
                <h3 className="text-lg font-semibold mb-4">Appointment Status Distribution</h3>
                <div className="h-64">
                  <Pie
                    data={appointmentStatusData}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: { legend: { position: 'top' }, title: { display: true, text: 'Appointment Status' } },
                    }}
                  />
                </div>
              </div>
              <div className="bg-white rounded-lg shadow p-4">
                <h3 className="text-lg font-semibold mb-4">User Growth (Last 6 Months)</h3>
                <div className="h-64">
                  <Bar
                    data={userGrowthData}
                    options={{
                      responsive: true,
                      maintainAspectRatio: false,
                      plugins: { legend: { position: 'top' }, title: { display: true, text: 'New Users per Month' } },
                      scales: { y: { beginAtZero: true } },
                    }}
                  />
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {recentActivity.map((activity, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{activity.action}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{activity.user_id}</td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(activity.timestamp).toLocaleString()}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {activeSection === 'users' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Manage Users</h2>
            <div className="mb-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-700">{editUser ? 'Edit User' : 'Add New User'}</h3>
              <form onSubmit={handleUserSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-4 md:mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="password"
                      placeholder="Password (min 6 characters)"
                      value={userForm.password}
                      onChange={(e) => setUserForm({ ...userForm, password: e.target.value })}
                      required={!editUser}
                      minLength={editUser ? 0 : 6}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Role</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={userForm.role}
                      onChange={(e) => setUserForm({ ...userForm, role: e.target.value, hospital_user_id: e.target.value === 'hospital' ? '' : userForm.hospital_user_id })}
                      required
                    >
                      <option value="doctor">Doctor</option>
                      <option value="patient">Patient</option>
                      <option value="hospital">Hospital</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="text"
                      placeholder="Name"
                      value={userForm.name}
                      onChange={(e) => setUserForm({ ...userForm, name: e.target.value })}
                      required
                    />
                  </div>
                  {userForm.role === 'doctor' && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Specialization</label>
                      <input
                        className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        type="text"
                        placeholder="Specialization"
                        value={userForm.specialization}
                        onChange={(e) => setUserForm({ ...userForm, specialization: e.target.value })}
                      />
                    </div>
                  )}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="text"
                      placeholder="Phone"
                      value={userForm.phone}
                      onChange={(e) => setUserForm({ ...userForm, phone: e.target.value })}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="email"
                      placeholder="Email"
                      value={userForm.email}
                      onChange={(e) => setUserForm({ ...userForm, email: e.target.value })}
                    />
                  </div>

                  {userForm.role === 'hospital' && (
                    <>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Location</label>
                        <input
                          className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                          type="text"
                          placeholder="Location"
                          value={userForm.location}
                          onChange={(e) => setUserForm({ ...userForm, location: e.target.value })}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Speciality</label>
                        <input
                          className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                          type="text"
                          placeholder="Speciality"
                          value={userForm.speciality}
                          onChange={(e) => setUserForm({ ...userForm, speciality: e.target.value })}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Beds Available</label>
                        <input
                          className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                          type="number"
                          placeholder="Number of Beds"
                          value={userForm.beds}
                          onChange={(e) => setUserForm({ ...userForm, beds: e.target.value })}
                        />
                      </div>
                    </>
                  )}

                  {(userForm.role === 'doctor' || userForm.role === 'patient') && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Hospital</label>
                      <select
                        className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        value={userForm.hospital_user_id}
                        onChange={(e) => setUserForm({ ...userForm, hospital_user_id: e.target.value })}
                      >
                        <option value="">Select Hospital</option>
                        {hospital.map((hosp) => (
                          <option key={hosp.user_id} value={hosp.user_id}>
                            {hosp.name}
                          </option>
                        ))}
                      </select>
                    </div>
                  )}

                  {userForm.role === 'patient' && (
                    <>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Age</label>
                        <input
                          className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                          type="number"
                          placeholder="Age"
                          value={userForm.age}
                          onChange={(e) => setUserForm({ ...userForm, age: e.target.value })}
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Gender</label>
                        <select
                          className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                          value={userForm.gender}
                          onChange={(e) => setUserForm({ ...userForm, gender: e.target.value })}
                        >
                          <option value="">Select Gender</option>
                          <option value="Male">Male</option>
                          <option value="Female">Female</option>
                          <option value="Other">Other</option>
                        </select>
                      </div>
                    </>
                  )}
                </div>
                <div className="flex justify-end gap-2">
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out text-sm md:text-base"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : editUser ? 'Update User' : 'Add User'}
                  </button>
                  {editUser && (
                    <button
                      type="button"
                      onClick={cancelEdit}
                      className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300 ease-in-out text-sm md:text-base"
                    >
                      Cancel
                    </button>
                  )}
                </div>
              </form>
            </div>

            <div className="mb-6">
              <h3 className="text-lg md:text-xl font-semibold mb-3 text-gray-700">Filter Users</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Name</label>
                  <input
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    type="text"
                    placeholder="Search by Name"
                    value={userFilter.name}
                    onChange={(e) => handleFilterChange('user', 'name', e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Specialization (Doctors)</label>
                  <input
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    type="text"
                    placeholder="Specialization"
                    value={userFilter.specialization}
                    onChange={(e) => handleFilterChange('user', 'specialization', e.target.value)}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Sort by Name</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={sortOrder}
                    onChange={(e) => setSortOrder(e.target.value)}
                  >
                    <option value="none">None</option>
                    <option value="asc">A-Z</option>
                    <option value="desc">Z-A</option>
                  </select>
                </div>
              </div>
            </div>

            <div className="flex justify-start gap-4 mb-4">
              <button
                className={`px-4 py-2 rounded-lg text-sm md:text-base ${activeUserTable === 'doctors' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}
                onClick={() => setActiveUserTable('doctors')}
              >
                Doctors ({doctors.length})
              </button>
              <button
                className={`px-4 py-2 rounded-lg text-sm md:text-base ${activeUserTable === 'patients' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}
                onClick={() => setActiveUserTable('patients')}
              >
                Patients ({patients.length})
              </button>
              <button
                className={`px-4 py-2 rounded-lg text-sm md:text-base ${activeUserTable === 'hospitals' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}
                onClick={() => setActiveUserTable('hospitals')}
              >
                Hospitals ({hospitals.length})
              </button>
            </div>

            {activeUserTable === 'doctors' && (
              <>
                <div className="flex justify-end mb-4">
                  <button
                    onClick={() => exportExcel('doctors')}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
                  >
                    Export Doctors to Excel
                  </button>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User ID</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Specialization</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hospital ID</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedDoctors.map((user) => (
                        <tr key={user.user_id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.user_id}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.name}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.email}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.phone}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.specialization}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.hospital_user_id}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => editUserData(user)}
                              className="text-indigo-600 hover:text-indigo-900 mr-3"
                            >
                              Edit
                            </button>
                            <button
                              onClick={() => handleDelete(user)}
                              className="text-red-600 hover:text-red-900"
                              disabled={isLoading && deleteUser === user.user_id}
                            >
                              {isLoading && deleteUser === user.user_id ? 'Deleting...' : 'Delete'}
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <div className="flex justify-between items-center mt-4">
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, doctors: Math.max(1, prev.doctors - 1) }))}
                      disabled={userPage.doctors === 1}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm">
                      Page {userPage.doctors} of {Math.ceil(filteredDoctors.length / itemsPerPage)}
                    </span>
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, doctors: prev.doctors + 1 }))}
                      disabled={userPage.doctors * itemsPerPage >= filteredDoctors.length}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                </div>
              </>
            )}

            {activeUserTable === 'patients' && (
              <>
                <div className="flex justify-end mb-4">
                  <button
                    onClick={() => exportExcel('patients')}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
                  >
                    Export Patients to Excel
                  </button>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User ID</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Age</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Gender</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hospital ID</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedPatients.map((user) => (
                        <tr key={user.user_id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.user_id}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.name}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.email}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.phone}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.age}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.gender}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.hospital_user_id}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => editUserData(user)}
                              className="text-indigo-600 hover:text-indigo-900 mr-3"
                            >
                              Edit
                            </button>
                            <button
                              onClick={() => handleDelete(user)}
                              className="text-red-600 hover:text-red-900"
                              disabled={isLoading && deleteUser === user.user_id}
                            >
                              {isLoading && deleteUser === user.user_id ? 'Deleting...' : 'Delete'}
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <div className="flex justify-between items-center mt-4">
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, patients: Math.max(1, prev.patients - 1) }))}
                      disabled={userPage.patients === 1}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm">
                      Page {userPage.patients} of {Math.ceil(patients.length / itemsPerPage)}
                    </span>
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, patients: prev.patients + 1 }))}
                      disabled={userPage.patients * itemsPerPage >= patients.length}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                </div>
              </>
            )}

            {activeUserTable === 'hospitals' && (
              <>
                <div className="flex justify-end mb-4">
                  <button
                    onClick={() => exportExcel('hospitals')}
                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
                  >
                    Export Hospitals to Excel
                  </button>
                </div>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User ID</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Speciality</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Beds</th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {paginatedHospitals.map((user) => (
                        <tr key={user.user_id}>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.user_id}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.name}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.email}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.phone}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.location}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.speciality}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{user.beds}</td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button
                              onClick={() => editUserData(user)}
                              className="text-indigo-600 hover:text-indigo-900 mr-3"
                            >
                              Edit
                            </button>
                            <button
                              onClick={() => handleDelete(user)}
                              className="text-red-600 hover:text-red-900"
                              disabled={isLoading && deleteUser === user.user_id}
                            >
                              {isLoading && deleteUser === user.user_id ? 'Deleting...' : 'Delete'}
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <div className="flex justify-between items-center mt-4">
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, hospitals: Math.max(1, prev.hospitals - 1) }))}
                      disabled={userPage.hospitals === 1}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Previous
                    </button>
                    <span className="text-sm">
                      Page {userPage.hospitals} of {Math.ceil(hospitals.length / itemsPerPage)}
                    </span>
                    <button
                      onClick={() => setUserPage(prev => ({ ...prev, hospitals: prev.hospitals + 1 }))}
                      disabled={userPage.hospitals * itemsPerPage >= hospitals.length}
                      className="px-4 py-2 bg-gray-300 rounded-lg text-sm disabled:opacity-50"
                    >
                      Next
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        )}

        {activeSection === 'appointments' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Manage Appointments</h2>
            <div className="mb-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-700">{editAppointment ? 'Edit Appointment' : 'Schedule New Appointment'}</h3>
              <form onSubmit={handleAppointmentSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-4 md:mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Doctor</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={appointmentForm.doctor_user_id}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, doctor_user_id: e.target.value })}
                      required
                    >
                      <option value="">Select Doctor</option>
                      {doctors.map(doctor => (
                        <option key={doctor.user_id} value={doctor.user_id}>{doctor.name}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Patient</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={appointmentForm.patient_user_id}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, patient_user_id: e.target.value })}
                      required
                    >
                      <option value="">Select Patient</option>
                      {patients.map(patient => (
                        <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="date"
                      value={appointmentForm.date}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, date: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Time</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="time"
                      value={appointmentForm.time}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, time: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={appointmentForm.status}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, status: e.target.value })}
                      required
                    >
                      <option value="Scheduled">Scheduled</option>
                      <option value="Completed">Completed</option>
                      <option value="Cancelled">Cancelled</option>
                    </select>
                  </div>
                  {editAppointment && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Token Number</label>
                      <input
                        className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg bg-gray-100 text-sm md:text-base"
                        type="text"
                        value={appointmentForm.token_number}
                        readOnly
                      />
                    </div>
                  )}
                  <div className="md:col-span-2 lg:col-span-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      placeholder="Notes"
                      value={appointmentForm.notes}
                      onChange={(e) => setAppointmentForm({ ...appointmentForm, notes: e.target.value })}
                      rows="2"
                    ></textarea>
                  </div>
                </div>
                <div className="flex justify-end gap-2">
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out text-sm md:text-base"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : editAppointment ? 'Update Appointment' : 'Schedule Appointment'}
                  </button>
                  {editAppointment && (
                    <button
                      type="button"
                      onClick={cancelAppointmentEdit}
                      className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300 ease-in-out text-sm md:text-base"
                    >
                      Cancel
                    </button>
                  )}
                </div>
              </form>
            </div>

            <div className="mb-6">
              <h3 className="text-lg md:text-xl font-semibold mb-3 text-gray-700">Filter Appointments</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Doctor</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={apptFilter.doctor_user_id}
                    onChange={(e) => handleFilterChange('appointment', 'doctor_user_id', e.target.value)}
                  >
                    <option value="">All Doctors</option>
                    {doctors.map(doctor => (
                      <option key={doctor.user_id} value={doctor.user_id}>{doctor.name}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Patient</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={apptFilter.patient_user_id}
                    onChange={(e) => handleFilterChange('appointment', 'patient_user_id', e.target.value)}
                  >
                    <option value="">All Patients</option>
                    {patients.map(patient => (
                      <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Status</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={apptFilter.status}
                    onChange={(e) => handleFilterChange('appointment', 'status', e.target.value)}
                  >
                    <option value="">All Statuses</option>
                    <option value="Scheduled">Scheduled</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                  </select>
                </div>
              </div>
            </div>

            <div className="flex justify-end mb-4">
              <button
                onClick={() => exportExcel('appointments')}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
              >
                Export Appointments to Excel
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Doctor</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Token Number</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {appointments.map((appt) => (
                    <tr key={appt._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {doctors.find(d => d.user_id === appt.doctor_user_id)?.name || appt.doctor_user_id}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        <button
                          onClick={() => viewPatientDetails(appt.patient_user_id)}
                          className="text-blue-600 hover:text-blue-900"
                        >
                          {patients.find(p => p.user_id === appt.patient_user_id)?.name || appt.patient_user_id}
                        </button>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{appt.token_seq || 'N/A'}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{new Date(appt.date).toLocaleDateString()}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{appt.time}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{appt.status}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 truncate max-w-xs">{appt.notes}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => editAppointmentData(appt)}
                          className="text-indigo-600 hover:text-indigo-900 mr-3"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => deleteAppointment(appt._id)}
                          className="text-red-600 hover:text-red-900 mr-3"
                          disabled={isDeletingAppointment}
                        >
                          {isDeletingAppointment ? 'Deleting...' : 'Delete'}
                        </button>
                        <button
                          onClick={() => downloadBillPDF(appt)}
                          className="text-green-600 hover:text-green-900"
                        >
                          Download Bill
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}


        {activeSection === 'prescriptions' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Manage Prescriptions</h2>
            <div className="mb-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-700">{editPrescription ? 'Edit Prescription' : 'Add New Prescription'}</h3>
              <form onSubmit={handlePrescriptionSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6 mb-4 md:mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Patient</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={prescriptionForm.patient_user_id}
                      onChange={(e) => setPrescriptionForm({ ...prescriptionForm, patient_user_id: e.target.value })}
                      required
                    >
                      <option value="">Select Patient</option>
                      {patients.map(patient => (
                        <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Medication</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="text"
                      placeholder="Medication Name"
                      value={prescriptionForm.medication}
                      onChange={(e) => setPrescriptionForm({ ...prescriptionForm, medication: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Dosage</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="text"
                      placeholder="e.g., 500mg, 1 tablet"
                      value={prescriptionForm.dosage}
                      onChange={(e) => setPrescriptionForm({ ...prescriptionForm, dosage: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Duration</label>
                    <div className="flex gap-2">
                      <input
                        className="w-2/3 px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        type="number"
                        placeholder="Duration"
                        value={prescriptionForm.duration}
                        onChange={(e) => setPrescriptionForm({ ...prescriptionForm, duration: e.target.value })}
                      />
                      <select
                        className="w-1/3 px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        value={prescriptionForm.duration_unit}
                        onChange={(e) => setPrescriptionForm({ ...prescriptionForm, duration_unit: e.target.value })}
                      >
                        <option value="days">Days</option>
                        <option value="weeks">Weeks</option>
                        <option value="months">Months</option>
                      </select>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Frequency</label>
                    <div className="flex gap-2">
                      <input
                        className="w-2/3 px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        type="number"
                        placeholder="Frequency"
                        value={prescriptionForm.frequency}
                        onChange={(e) => setPrescriptionForm({ ...prescriptionForm, frequency: e.target.value })}
                      />
                      <select
                        className="w-1/3 px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                        value={prescriptionForm.frequency_unit}
                        onChange={(e) => setPrescriptionForm({ ...prescriptionForm, frequency_unit: e.target.value })}
                      >
                        <option value="times per day">Times/Day</option>
                        <option value="times per week">Times/Week</option>
                        <option value="times per month">Times/Month</option>
                      </select>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="followUp"
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                      checked={prescriptionForm.follow_up}
                      onChange={(e) => setPrescriptionForm({ ...prescriptionForm, follow_up: e.target.checked })}
                    />
                    <label htmlFor="followUp" className="ml-2 block text-sm font-medium text-gray-700">Follow Up Required</label>
                  </div>
                  <div className="md:col-span-2 lg:col-span-3">
                    <label className="block text-sm font-medium text-gray-700 mb-1">Instructions</label>
                    <textarea
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      placeholder="Instructions"
                      value={prescriptionForm.instructions}
                      onChange={(e) => setPrescriptionForm({ ...prescriptionForm, instructions: e.target.value })}
                      rows="2"
                    ></textarea>
                  </div>
                </div>
                <div className="flex justify-end gap-2">
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out text-sm md:text-base"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : editPrescription ? 'Update Prescription' : 'Add Prescription'}
                  </button>
                  {editPrescription && (
                    <button
                      type="button"
                      onClick={cancelPrescriptionEdit}
                      className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300 ease-in-out text-sm md:text-base"
                    >
                      Cancel
                    </button>
                  )}
                </div>
              </form>
            </div>

            <div className="mb-6">
              <h3 className="text-lg md:text-xl font-semibold mb-3 text-gray-700">Filter Prescriptions</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Patient</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={prescriptionFilter.patient_user_id}
                    onChange={(e) => handleFilterChange('prescription', 'patient_user_id', e.target.value)}
                  >
                    <option value="">All Patients</option>
                    {patients.map(patient => (
                      <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Medication</label>
                  <input
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    type="text"
                    placeholder="Search by Medication"
                    value={prescriptionFilter.medication}
                    onChange={(e) => handleFilterChange('prescription', 'medication', e.target.value)}
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end mb-4">
              <button
                onClick={() => exportExcel('prescriptions')}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
              >
                Export Prescriptions to Excel
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Medication</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Dosage</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Instructions</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Frequency</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Follow Up</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {prescriptions.map((prescription) => (
                    <tr key={prescription._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {patients.find(p => p.user_id === prescription.patient_user_id)?.name || prescription.patient_user_id}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prescription.medication}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{prescription.dosage}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 truncate max-w-xs">{prescription.instructions}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prescription.duration} {prescription.duration_unit}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prescription.frequency} {prescription.frequency_unit}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {prescription.follow_up ? 'Yes' : 'No'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => editPrescriptionData(prescription)}
                          className="text-indigo-600 hover:text-indigo-900 mr-3"
                        >
                          Edit
                        </button>
                        <button
                          onClick={() => deletePrescription(prescription._id)}
                          className="text-red-600 hover:text-red-900"
                          disabled={isDeletingPrescription}
                        >
                          {isDeletingPrescription ? 'Deleting...' : 'Delete'}
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeSection === 'medical_records' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Manage Medical Records</h2>
            <button onClick={refreshMedicalRecords} className="mb-2 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Refresh</button>
            <div className="mb-6 bg-gray-50 p-4 rounded-lg">
              <h3 className="text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-700">{editRecord ? 'Edit Medical Record' : 'Add New Medical Record'}</h3>
              <form onSubmit={handleRecordSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mb-4 md:mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Patient</label>
                    <select
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      value={recordForm.patient_user_id}
                      onChange={(e) => setRecordForm({ ...recordForm, patient_user_id: e.target.value })}
                      required
                    >
                      <option value="">Select Patient</option>
                      {patients.map(patient => (
                        <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Diagnosis</label>
                    <input
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      type="text"
                      placeholder="Diagnosis"
                      value={recordForm.diagnosis}
                      onChange={(e) => setRecordForm({ ...recordForm, diagnosis: e.target.value })}
                      required
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Treatment</label>
                    <textarea
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      placeholder="Treatment"
                      value={recordForm.treatment}
                      onChange={(e) => setRecordForm({ ...recordForm, treatment: e.target.value })}
                      rows="2"
                    ></textarea>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea
                      className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                      placeholder="Additional Notes"
                      value={recordForm.notes}
                      onChange={(e) => setRecordForm({ ...recordForm, notes: e.target.value })}
                      rows="2"
                    ></textarea>
                  </div>
                </div>
                <div className="flex justify-end gap-2">
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition duration-300 ease-in-out text-sm md:text-base"
                    disabled={isLoading}
                  >
                    {isLoading ? 'Saving...' : editRecord ? 'Update Record' : 'Add Record'}
                  </button>
                  {editRecord && (
                    <button
                      type="button"
                      onClick={cancelRecordEdit}
                      className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300 ease-in-out text-sm md:text-base"
                    >
                      Cancel
                    </button>
                  )}
                </div>
              </form>
            </div>

            <div className="mb-6">
              <h3 className="text-lg md:text-xl font-semibold mb-3 text-gray-700">Filter Medical Records</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Patient</label>
                  <select
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    value={recordFilter.patient_user_id}
                    onChange={(e) => handleFilterChange('record', 'patient_user_id', e.target.value)}
                  >
                    <option value="">All Patients</option>
                    {patients.map(patient => (
                      <option key={patient.user_id} value={patient.user_id}>{patient.name}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Filter by Diagnosis</label>
                  <input
                    className="w-full px-3 py-1 md:px-4 md:py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm md:text-base"
                    type="text"
                    placeholder="Search by Diagnosis"
                    value={recordFilter.diagnosis}
                    onChange={(e) => handleFilterChange('record', 'diagnosis', e.target.value)}
                  />
                </div>
              </div>
            </div>

            <div className="flex justify-end mb-4">
              <button
                onClick={() => exportExcel('medical_records')}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition duration-300 ease-in-out text-sm md:text-base"
              >
                Export Medical Records to Excel
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Diagnosis</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Treatment</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Notes</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {medicalRecords.length === 0 ? (
                    <tr><td colSpan={5} className="text-center py-4 text-gray-500">No medical records found.</td></tr>
                  ) : medicalRecords.map((record) => (
                    <tr key={record._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {patients.find(p => p.user_id === record.patient_user_id)?.name || record.patient_user_id}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{record.diagnosis}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 truncate max-w-xs">{record.treatment}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 truncate max-w-xs">{record.notes}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button onClick={() => editRecordData(record)} className="text-indigo-600 hover:text-indigo-900 mr-3">Edit</button>
                        <button onClick={() => deleteRecord(record._id)} className="text-red-600 hover:text-red-900" disabled={isDeletingRecord}>{isDeletingRecord ? 'Deleting...' : 'Delete'}</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeSection === 'recent_activity' && (
          <div className="bg-white rounded-lg shadow p-4 md:p-6">
            <h2 className="text-xl md:text-2xl font-bold mb-4 md:mb-6 text-gray-800">Recent Activity</h2>
            <button onClick={refreshRecentActivity} className="mb-2 px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Refresh</button>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {paginatedRecentActivity.length === 0 ? (
                    <tr><td colSpan={3} className="text-center py-4 text-gray-500">No activity found.</td></tr>
                  ) : paginatedRecentActivity.map((activity) => (
                    <tr key={activity._id}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{activity.action}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{activity.user_id}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{new Date(activity.timestamp).toLocaleString()}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="flex justify-between items-center mt-4">
              <button
                className={`px-4 py-2 rounded transition-colors duration-200 ${activityPage === 1 ? 'bg-blue-300 text-white cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
                onClick={() => setActivityPage((p) => Math.max(1, p - 1))}
                disabled={activityPage === 1}
              >
                Previous
              </button>
              <span>Page {activityPage} of {Math.max(1, Math.ceil(allRecentActivity.length / itemsPerPage))}</span>
              <button
                className={`px-4 py-2 rounded transition-colors duration-200 ${(activityPage === Math.ceil(allRecentActivity.length / itemsPerPage) || allRecentActivity.length === 0) ? 'bg-blue-300 text-white cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}
                onClick={() => setActivityPage((p) => Math.min(Math.ceil(allRecentActivity.length / itemsPerPage), p + 1))}
                disabled={activityPage === Math.ceil(allRecentActivity.length / itemsPerPage) || allRecentActivity.length === 0}
              >
                Next
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}